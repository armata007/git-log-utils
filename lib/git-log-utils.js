// Generated by CoffeeScript 1.9.3
(function() {
  var ChildProcess, Fs, GitUtils, Path, _;

  ChildProcess = require("child_process");

  Path = require("path");

  Fs = require("fs");

  _ = require('underscore');

  GitUtils = exports;


  /*
    returns an array of javascript objects representing the commits that effected the requested file
    with line stats, that looks like this:
      [{
        "id": "1c41d8f647f7ad30749edcd0a554bd94e301c651",
        "authorName": "Bee Wilkerson",
        "relativeDate": "6 days ago",
        "authorDate": 1450881433,
        "message": "docs all work again after refactoring to bumble-build",
        "body": "",
        "hash": "1c41d8f",
        "linesAdded": 2,
        "linesDeleted": 2
      }, {
        ...
      }]
   */

  GitUtils.getFileCommitHistory = function(fileName, callback) {
    var exit, lastCommitObj, logItems, stdout;
    logItems = [];
    lastCommitObj = null;
    stdout = function(output) {
      return lastCommitObj = GitUtils._parseGitLogOutput(output, lastCommitObj, logItems);
    };
    exit = function(code) {
      return GitUtils._onFinishedParse(code, logItems, callback);
    };
    return GitUtils._fetchFileHistory(fileName, stdout, exit);
  };

  GitUtils._parseGitLogOutput = function(output, lastCommitObj, logItems) {
    var i, len, line, logLines, matches;
    logLines = output.split("\n");
    for (i = 0, len = logLines.length; i < len; i++) {
      line = logLines[i];
      if (line[0] === '{' && line[line.length - 1] === '}') {
        lastCommitObj = GitUtils._parseCommitObj(line);
        if (lastCommitObj) {
          logItems.push(lastCommitObj);
        }
      } else if (line[0] === '{') {
        lastCommitObj = line;
      } else if (_.isString(lastCommitObj)) {
        lastCommitObj += line;
        if (line[line.length - 1] === '}') {
          lastCommitObj = GitUtils._parseCommitObj(lastCommitObj);
          if (lastCommitObj) {
            logItems.push(lastCommitObj);
          }
        }
      } else if ((lastCommitObj != null) && (matches = line.match(/^(\d+)\s*(\d+).*/))) {
        lastCommitObj.linesAdded = Number.parseInt(matches[1]);
        lastCommitObj.linesDeleted = Number.parseInt(matches[2]);
      }
    }
    return lastCommitObj;
  };

  GitUtils._parseCommitObj = function(line) {
    var encLine;
    encLine = line.replace(/\t/g, '  ').replace(/\"/g, "'").replace(/(\n|\n\r)/g, '<br>').replace(/\r/g, '<br>').replace(/\#\/dquotes\//g, '"');
    try {
      return JSON.parse(encLine);
    } catch (_error) {
      console.warn("failed to parse JSON " + encLine);
      return null;
    }
  };

  GitUtils._onFinishedParse = function(code, logItems, callback) {
    if (code === 0 && logItems.length !== 0) {
      callback(logItems);
    } else {
      callback([]);
    }
  };

  GitUtils._fetchFileHistory = function(fileName, stdout, exit) {
    var format;
    format = ("{\"id\": \"%H\", \"authorName\": \"%an\", \"relativeDate\": \"%cr\", \"authorDate\": %at, " + " \"message\": \"%s\", \"body\": \"%b\", \"hash\": \"%h\"}").replace(/\"/g, "#/dquotes/");
    return new BufferedProcess({
      command: "git",
      args: ["-C", path.dirname(fileName), "log", "--pretty=format:" + format, "--topo-order", "--date=local", "--numstat", fileName],
      stdout: stdout,
      exit: exit
    });
  };

}).call(this);
